
import collections
from weakref import WeakSet

import graphene
from django.apps import apps
from django.conf.urls import url
from django.db import models
from django.db.models.base import ModelBase
from django.db.models.fields import related
from graphene_django.types import DjangoObjectType
from graphene_django.views import GraphQLView
from rest_framework.permissions import AllowAny, BasePermission
from rest_framework.routers import APIRootView, DefaultRouter

from EasyAPI.metadata import EasyAPIMetadata


def get_gql_type(fields, field):
    from django.db import models
    from graphene_django.converter import convert_django_field
    if field not in fields:
        return None
    return convert_django_field(fields[field])
    
class AllowNone(BasePermission):
    def has_permission(self, request, view):
        return False

class ModelResource(object):
    description = "Generated by EasyAPI"
    permissions = [AllowAny]
    model = None
    viewset_class = None
    filterset_class = None
    graphql_query = None
    fields = []
    read_only = []
    list_display = []
    inlines = []

    def __init__(self, api,
            fields=None, # Fields that can be read and potentially edited
            read_only=None, # Fields, methods and properties that are read-only
            list_display=None, # The favorite fields to display in a table
            permissions=None,
            inlines=None,
            viewset_class=None,
            filterset_class=None,
            graphql_query=None,
        ):
        self.api = api
        self.permissions = permissions or self.permissions
        self.viewset_class = viewset_class or self.viewset_class
        self.filterset_class = filterset_class or self.filterset_class
        self.graphql_query = graphql_query or self.graphql_query
        self.fields = fields or self.fields or self.guess_model_fields()
        self.read_only = read_only or self.read_only
        self.list_display = list_display or self.list_display or self.fields + self.read_only
        self.inlines = inlines or self.inlines

    def guess_model_fields(self):
        return [key for key, value in self.model_fields.items()
            if not getattr(value, 'related_model', None)]

    @classmethod
    def generate_for_model(cls, _model, **kwargs):
        class Meta(kwargs.get('Meta', object)):
            model = _model
        kwargs['Meta'] = Meta

        return type('%sResource'%_model._meta.object_name, (cls,), kwargs)

    @property
    def model(self):
        from django.core.exceptions import ImproperlyConfigured

        try:
            return self.Meta.model
        except:
            raise ImproperlyConfigured("Can't make a %s without setting Meta.model"%self)
    
    @property
    def model_fields(self):
        return collections.OrderedDict([
            (f.name, f) for f in self.model._meta.get_fields()
        ])
    

    def get_filterset_class(self):
        from EasyAPI.EasyFilters import EasyFilters

        return self.filterset_class or EasyFilters.get_filter_class(
            self.model, self.fields)

    def generate_viewset(self):
        from .EasyViewSet import EasyViewSet
        return (self.viewset_class or EasyViewSet).Assemble(
            model=self.model,
            fields=self.fields,
            permissions=self.permissions + self.api.permissions,
            description=self.description,
        )

    @property
    def gql_fields(self):
        fields = {field: get_gql_type(self.model_fields, field) for field in self.fields}
        return {k: v for k, v in fields.items() if v and not isinstance(v, graphene.Dynamic)}

    def generate_graphql(self):
        from graphene_django.filter import DjangoFilterConnectionField

        if self.graphql_query:
            return self.graphql_query

        class Meta:
            model = self.model
            name = self.model._meta.object_name
            fields = list(self.gql_fields.keys()) + ['id', ]
            filter_fields = self.get_filterset_class().filter_fields
            #filterset_class = self.filterset_class
            interfaces = (graphene.relay.Node,)

        EasyObjectType = type(Meta.name, (DjangoObjectType,), {
            "Meta": Meta
        })

        list_view = "all_%s" % self.model._meta.verbose_name_plural
        detail_view = self.model._meta.verbose_name


        gql_list = DjangoFilterConnectionField(EasyObjectType)
        gql_detail = graphene.relay.Node.Field(EasyObjectType, **self.gql_fields)

        def _list(self, info, **kwargs):
            qs = self.model.objects.all()
            return qs
        def _detail(self, info, **kwargs):
            for field in self.gql_fields:
                if kwargs.get(field, None) is not None:
                    return self.model.objects.get(**{field: kwargs[field]})

        EasyObjectTypeQuery = type("%sQuery"%Meta.name, (object,), {
            detail_view: gql_detail,
            #"resolve_%s"%detail_view: _detail,
            list_view: gql_list,
            #"resolve_%s"%list_view: _list,
        })

        return EasyObjectType, EasyObjectTypeQuery
