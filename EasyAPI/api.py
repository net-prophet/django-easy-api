from weakref import WeakSet
from django.apps import apps
from django.db.models.base import ModelBase

from EasyAPI.router import easy_router
from rest_framework import permissions
from graphene_django.types import DjangoObjectType
import graphene

all_apis = WeakSet()
actions = ["create", "edit", "retrieve", "list", "delete"]


class AlreadyRegistered(Exception):
    pass


def check_dependencies(app_configs, **kwargs):
    errors = []
    from django.core import checks

    if not apps.is_installed("EasyAPI"):
        return errors

    error = "'%s' must be in INSTALLED_APPS to use django-easy-api"

    def check_app_installed(app):
        if not apps.is_installed(app):
            missing_app = checks.Error(error % app)
            errors.append(missing_app)

    check_app_installed("django.contrib.contenttypes")
    check_app_installed("rest_framework")
    check_app_installed("django_filters")

    return errors


class EasyAPI(object):
    _registry = {}

    def __init__(self, name, perm, desc=None):
        self.name = name
        self._registry = {}
        default_desc = "API generated by Django Easy API"
        self.description = desc if desc is not None else default_desc
        self.permissions = {k: perm for k in actions}
        all_apis.add(self)
        self._registry.update(self._registry)

    def register(self, model, api_class):

        api_class = api_class or ModelAPI
        if isinstance(model, ModelBase):
            model = [model]

        # Check to make sure we are registering ModelAPI only
        from django.core.exceptions import ImproperlyConfigured

        if not issubclass(api_class, ModelAPI):
            raise ImproperlyConfigured(
                "The model %s is not a ModelAPI, so it cannot "
                "be registered with the api." % api_class.__name__
            )

        api_class.permissions = self.create_model_perms(api_class)

        for m in model:
            if m._meta.abstract:
                raise ImproperlyConfigured(
                    "The model %s is abstract, so it cannot "
                    "be registered with the api." % m.__name__
                )
            if m in self._registry:
                raise AlreadyRegistered(
                    "The model %s is already registered." % m.__name__
                )
            self._registry[m] = api_class

    def create_model_perms(self, model_api):
        import copy

        api_perm = copy.deepcopy(self.permissions)
        api_perm.update(model_api.actions)
        return api_perm

    @property
    def urls(self):
        return self.get_urls(), self.name, self.name

    def get_urls(self):
        return easy_router(self)


def get_gql_type(fields, field):
    from django.db import models
    if field not in fields:
        return None
    if isinstance(fields[field], (models.CharField, models.TextField)):
        return graphene.String()
    if isinstance(fields[field], (
                models.IntegerField,
                models.BigIntegerField,
                models.AutoField,
                models.PositiveIntegerField)):
        return graphene.Int()


class ModelAPI(object):
    class AllowNone(permissions.BasePermission):
        def has_permission(self, request, view):
            return False

    description = "Generated by EasyAPI"
    actions = {"None": AllowNone}

    def generate_viewset(self, _model):
        from .EasyViewSet import EasyViewSet

        return EasyViewSet.Assemble(
            model=_model,
            fields=self.api_fields,
            actions=self.permissions,
            description=self.description,
        )

    def generate_graphql(self, _model, **kwargs):
        from EasyAPI.EasyFilters import EasyFilters
        from graphene_django.filter import DjangoFilterConnectionField

        ModelFilter = EasyFilters.get_filter_class(_model, list(self.api_fields))

        class Meta:
            model = _model
            name = _model._meta.object_name
            fields = list(self.api_fields) + ['id', ]
            filterset_class = ModelFilter
            interfaces = (graphene.relay.Node,)

        EasyObjectType = type(Meta.name, (DjangoObjectType,), {
            "Meta": Meta
        })

        class EasyObjectTypeQuery(object):
            pass

        list_view = "all_%s" % _model._meta.verbose_name_plural
        detail_view = _model._meta.verbose_name

        model_fields = {field.name: field for field in _model._meta.fields}
        fields = {field: get_gql_type(model_fields, field) for field in self.api_fields}
        fields = {k: v for k, v in fields.items() if v}

        gql_list = DjangoFilterConnectionField(EasyObjectType)
        gql_detail = graphene.relay.Node.Field(EasyObjectType, **fields)

        setattr(EasyObjectTypeQuery, detail_view, gql_detail)
        setattr(EasyObjectTypeQuery, list_view, gql_list)
            
        def _list(self, info, **kwargs):
            return _model.objects.all()
        def _detail(self, info, **kwargs):
            for field in fields:
                if kwargs.get(field, None) is not None:
                    return _model.objects.get(**{field: kwargs[field]})

        setattr(
            EasyObjectTypeQuery, "resolve_%s" % list_view, _list,
        )
        setattr(
            EasyObjectTypeQuery, "resolve_%s" % detail_view, _detail,
        )

        return EasyObjectType, EasyObjectTypeQuery
