from weakref import WeakSet
from django.apps import apps
from django.db.models.base import ModelBase
from .EasyViewSet import EasyViewSet
from EasyAPI.metadata import EasyAPIMetadata
from rest_framework.routers import DefaultRouter, APIRootView
from graphene_django.views import GraphQLView

import graphene
from django.conf.urls import url
from rest_framework import permissions
from graphene_django.types import DjangoObjectType
import graphene

all_apis = WeakSet()
actions = ["create", "edit", "retrieve", "list", "delete"]


class AlreadyRegistered(Exception):
    pass


def check_dependencies(app_configs, **kwargs):
    errors = []
    from django.core import checks

    if not apps.is_installed("EasyAPI"):
        return errors

    error = "'%s' must be in INSTALLED_APPS to use django-easy-api"

    def check_app_installed(app):
        if not apps.is_installed(app):
            missing_app = checks.Error(error % app)
            errors.append(missing_app)

    check_app_installed("django.contrib.contenttypes")
    check_app_installed("rest_framework")
    check_app_installed("django_filters")

    return errors


class EasyAPI(object):
    _registry = {}

    def __init__(self, name, perm, desc=None):
        self.name = name
        self._registry = {}
        default_desc = "API generated by Django Easy API"
        self.description = desc if desc is not None else default_desc
        self.permissions = [perm]
        all_apis.add(self)
        self._registry.update(self._registry)

    def register(self, model, api_class):

        api_class = api_class or ModelResource
        if isinstance(model, ModelBase):
            model = [model]

        # Check to make sure we are registering ModelAPI only
        from django.core.exceptions import ImproperlyConfigured

        if not issubclass(api_class, ModelResource):
            raise ImproperlyConfigured(
                "The model %s is not a ModelAPI, so it cannot "
                "be registered with the api." % api_class.__name__
            )

        for m in model:
            if m._meta.abstract:
                raise ImproperlyConfigured(
                    "The model %s is abstract, so it cannot "
                    "be registered with the api." % m.__name__
                )
            if m in self._registry:
                raise AlreadyRegistered(
                    "The model %s is already registered." % m.__name__
                )
            self._registry[m] = api_class

    @property
    def urls(self):
        return self.get_urls(), self.name, self.name

    def get_urls(self):
        router = DefaultRouter()

        class EasyAPIRootView(APIRootView):
            metadata_class = EasyAPIMetadata

            @classmethod
            def get_view_name(self):
                return self.name

            @classmethod
            def Assemble(cls, **kwargs):
                class AssembledEasyAPIRootView(cls):
                    name = kwargs["name"]
                    permissions = kwargs["permissions"]

                return AssembledEasyAPIRootView

        router.APIRootView = EasyAPIRootView.Assemble(
            name=self.name, permissions=self.permissions
        )
        router.APIRootView.__doc__ = self.description

        queries = []
        for model, model_api in self._registry.items():
            name = model._meta.model_name
            label = model._meta.app_label
            api = model_api()
            router.register(
                r"%s" % label,
                api.generate_viewset(self),
                "%s %s" % (name, label),
            )

            objectType, query = api.generate_graphql(self)
            queries.append(query)

        class Query(*queries, graphene.ObjectType):
            pass

        schema = graphene.Schema(query=Query)

        urlpatterns = router.urls + [
            url(r"^graphql$", GraphQLView.as_view(graphiql=True, schema=schema)),
        ]
        return urlpatterns


def get_gql_type(fields, field):
    from django.db import models
    from graphene_django.converter import convert_django_field
    if field not in fields:
        return None
    return convert_django_field(fields[field])
    
class AllowNone(permissions.BasePermission):
    def has_permission(self, request, view):
        return False

class ModelResource(object):
    description = "Generated by EasyAPI"
    permissions = [permissions.AllowAny]

    @property
    def model(self):
        return self.Meta.model

    def generate_viewset(self, api):
        from .EasyViewSet import EasyViewSet

        return EasyViewSet.Assemble(
            model=self.model,
            fields=self.api_fields,
            permissions=self.permissions + api.permissions,
            description=self.description,
        )

    def generate_graphql(self, api, **kwargs):
        from EasyAPI.EasyFilters import EasyFilters
        from graphene_django.filter import DjangoFilterConnectionField

        ModelFilter = EasyFilters.get_filter_class(self.model, list(self.api_fields))

        class Meta:
            model = self.model
            name = self.model._meta.object_name
            fields = list(self.api_fields) + ['id', ]
            filter_fields = ModelFilter().filter_fields
            #filterset_class = ModelFilter
            interfaces = (graphene.relay.Node,)

        EasyObjectType = type(Meta.name, (DjangoObjectType,), {
            "Meta": Meta
        })

        list_view = "all_%s" % self.model._meta.verbose_name_plural
        detail_view = self.model._meta.verbose_name

        model_fields = {field.name: field for field in self.model._meta.fields}
        fields = {field: get_gql_type(model_fields, field) for field in self.api_fields}
        fields = {k: v for k, v in fields.items() if v}

        gql_list = DjangoFilterConnectionField(EasyObjectType)
        gql_detail = graphene.relay.Node.Field(EasyObjectType, **fields)

        def _list(self, info, **kwargs):
            qs = self.model.objects.all()
            return qs
        def _detail(self, info, **kwargs):
            for field in fields:
                if kwargs.get(field, None) is not None:
                    return self.model.objects.get(**{field: kwargs[field]})

        EasyObjectTypeQuery = type("%sQuery"%Meta.name, (object,), {
            detail_view: gql_detail,
            #"resolve_%s"%detail_view: _detail,
            list_view: gql_list,
            #"resolve_%s"%list_view: _list,
        })

        return EasyObjectType, EasyObjectTypeQuery