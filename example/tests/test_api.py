import itertools
from rest_framework import status
from example.app.widgets.models import Widget, Store, default_store_id
from example.app.widgets.options import COLORS, SIZES, SHAPES
from example.tests.factories import PurchaseFactory
from django.contrib.auth import get_user_model
from rest_framework.test import APITestCase, APIClient
from unittest import skip

import random

User = get_user_model()

TEST = {"username": "testuser", "email": "test@test.co", "password": "testing123"}

SUPER = {"username": "testsuper", "email": "super@test.co", "password": "super123"}

class PublicAPITest(APITestCase):
    def setUp(self):
        # Let's create a test user and set our client
        self.client = APIClient()


    @classmethod
    def setUpClass(cls):
        # Set up the DB
        super(PublicAPITest, cls).setUpClass()
        for color, size, shape in itertools.product(COLORS, SIZES, SHAPES):
            Widget.objects.create(color=color[0], size=size[0], shape=shape[0], store_id=default_store_id())

        for i in range(0, 200):
            PurchaseFactory.create()

    def test_public_root(self):
        response = self.client.get("/publicapi/")
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_public_metadata(self):
        response = self.client.options("/publicapi/")
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        self.assertIn("name", response.data)
        self.assertEqual(response.data["name"], "PublicAPI")
        self.assertIn("description", response.data)
        description = "This is a public API"
        self.assertEqual(response.data["description"], description)
        self.assertIn("permissions", response.data)

    def test_model_metadata(self):
        response = self.client.options("/publicapi/widgets/")
        self.assertEqual(response.status_code, status.HTTP_200_OK)

        self.assertIn("name", response.data)
        self.assertEqual(response.data["name"], "Widgets")
        self.assertIn("description", response.data)
        description = "Generated by EasyAPI"
        self.assertIn("actions", response.data)
        self.assertIn("filters", response.data)

    def test_public_get_widget(self):
        widgets = self.client.get("/publicapi/widgets/")
        self.assertEqual(widgets.status_code, status.HTTP_200_OK)

        self.assertEqual(len(widgets.data), 336)
        rand_index = random.randint(0, len(widgets.data) - 1)
        widget_fields = ["name", "color", "pk", "store"]

        self.assertEqual(len(widgets.data[rand_index]), len(widget_fields))
        [self.assertIn(field, widgets.data[rand_index]) for field in widget_fields]

    def test_public_get_purchases(self):
        purchases = self.client.get("/publicapi/purchases/")
        self.assertEqual(purchases.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)

    def test_public_get_customers(self):
        customers = self.client.get("/publicapi/customers/")
        self.assertEqual(customers.status_code, status.HTTP_405_METHOD_NOT_ALLOWED)


NUM_PURCHASES = 20

# For this you get full API access but only if logged in
@skip
class PrivateAPITest(APITestCase):
    def setUp(self):
        self.client = APIClient()

    @classmethod
    def setUpClass(self):
        # Set up the DB
        super(PrivateAPITest, self).setUpClass()
        for color, size, shape in itertools.product(COLORS, SIZES, SHAPES):
            Widget.objects.create(color=color[0], size=size[0], shape=shape[0])

        for i in range(0, NUM_PURCHASES):
            PurchaseFactory.create()

        # Let's create a test user and set our client
        self.user = User.objects.create(username=TEST["username"], email=TEST["email"])
        self.user.set_password(TEST["password"])
        self.user.save()
        self.admin = User.objects.create(
            username=SUPER["username"], email=SUPER["email"]
        )
        self.admin.set_password(SUPER["password"])
        self.admin.save()

    def test_private_root(self):
        response = self.client.get("/privateapi/")
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_private_get_widget(self):
        widgets = self.client.get("/privateapi/widgets/")
        self.assertEqual(widgets.status_code, status.HTTP_403_FORBIDDEN, "Not logged in is forbidden to private widgets API")
        self.client.login(username=TEST["username"], password=TEST["password"])
        Store.objects.update(owner=self.admin)

        widgets = self.client.get("/privateapi/widgets/")
        self.assertEqual(widgets.status_code, status.HTTP_200_OK)

        self.assertEqual(len(widgets.data), 0, "Not store owner, 0 widgets on private API")
        
        Store.objects.update(owner=self.user)

        widgets = self.client.get("/privateapi/widgets/")
        self.assertEqual(widgets.status_code, status.HTTP_200_OK)

        self.assertEqual(len(widgets.data), 336, "Store owner should see store widgets on private API")
        rand_index = random.randint(0, len(widgets.data) - 1)
        widget_fields = ["name", "color", "size", "shape", "cost", "pk", "store"]

        self.assertEqual(len(widgets.data[rand_index]), len(widget_fields))
        [self.assertIn(field, widgets.data[rand_index]) for field in widget_fields]

    def test_private_get_purchases(self):
        purchases = self.client.get("/privateapi/purchases/")
        self.assertEqual(
            purchases.status_code,
            status.HTTP_403_FORBIDDEN,
            "Not logged in is forbidden to private purchases API",
        )

        self.client.login(username=TEST["username"], password=TEST["password"])

        Store.objects.update(owner=self.admin)

        purchases = self.client.get("/privateapi/purchases/")
        self.assertEqual(
            purchases.status_code, status.HTTP_200_OK, "Logged in can see purchases"
        )
        self.assertEqual(
            len(purchases.data), 0, "Doesnt own store so can see 0 purchases"
        )

        Store.objects.update(owner=self.user)

        purchases = self.client.get("/privateapi/purchases/")
        self.assertEqual(
            purchases.status_code, status.HTTP_200_OK, "Logged in can see purchases"
        )
        self.assertEqual(len(purchases.data), NUM_PURCHASES)

        rand_index = random.randint(0, len(purchases.data) - 1)
        purchase_fields = ["sale_date", "sale_price", "profit", "customer", "pk"]

        self.assertEqual(len(purchases.data[rand_index]), len(purchase_fields))
        [self.assertIn(field, purchases.data[rand_index]) for field in purchase_fields]

    def test_private_get_customers(self):
        customers = self.client.get("/privateapi/customers/")
        self.assertEqual(
            customers.status_code,
            status.HTTP_403_FORBIDDEN,
            "Not logged in is forbidden on private customer API",
        )

        self.client.login(username=TEST["username"], password=TEST["password"])

        Store.objects.update(owner=self.admin)

        customers = self.client.get("/privateapi/customers/")
        self.assertEqual(
            customers.status_code, status.HTTP_200_OK, "Logged in can list customers"
        )
        self.assertEqual(
            len(customers.data), 0, "Zero customers because we dont own this store"
        )

        Store.objects.update(owner=self.user)
        customers = self.client.get("/privateapi/customers/")
        self.assertEqual(
            len(customers.data),
            NUM_PURCHASES,
            "We can see all the customers for the store we own",
        )
        rand_index = random.randint(0, len(customers.data) - 1)
        customer_fields = ["name", "state", "gender", "age", "pk"]

        self.assertEqual(len(customers.data[rand_index]), len(customer_fields))
        [self.assertIn(field, customers.data[rand_index]) for field in customer_fields]

