from weakref import WeakSet
from django.apps import apps
from django.db.models.base import ModelBase

from EasyAPI.router import easy_router
from rest_framework import permissions

all_apis = WeakSet()
actions = ['create', 'edit', 'retrieve', 'list', 'delete']


class AlreadyRegistered(Exception):
    pass


class EasyAPI(object):
    _registry = {}

    def __init__(self, name, perm, desc=None):
        self._registry = {}
        self.name = name
        default_desc = 'API generated by Django Easy API'
        self.description = desc if desc is not None else default_desc
        self.permissions = {k: perm for k in actions}
        all_apis.add(self)
        self._registry.update(self._registry)

    def check(self, app_configs=None):
        if app_configs is None:
            app_configs = apps.get_app_configs()
            app_configs = set(app_configs)

        errors = []
        modelapis = (o for o in self._registry.values() if o.__class__ is not
                     EasyAPI)

        for modelapi in modelapis:
            if modelapi.model._meta.app_config in app_configs:
                errors.extend(modelapi.check())

        return errors

    def check_dependencies(app_configs, **kwargs):
        errors = []
        from django.core import checks
        if not apps.is_installed('django.contrib.contenttypes'):
            missing_app = checks.Error(
                "'django.contrib.contenttypes' must be in INSTALLED_APPS"
                " to use django-easy-api",
            )
            errors.append(missing_app)
        return errors

    def register(cls, model, api_class):

        api_class = api_class or ModelAPI
        if isinstance(model, ModelBase):
            model = [model]

        api_class.permissions = cls.create_model_perms(api_class)

        for m in model:
            if m._meta.abstract:
                from django.core.exceptions import ImproperlyConfigured
                raise ImproperlyConfigured(
                    'The model %s is abstract, so it cannot '
                    'be registered with api.' % m.__name__
                )
            if m in cls._registry:
                raise AlreadyRegistered(
                    'The model %s is already registered.' % m.__name__
                )
            cls._registry[m] = api_class

    def create_model_perms(cls, model_api):
        import copy
        api_perm = copy.deepcopy(cls.permissions)
        api_perm.update(model_api.actions)
        return api_perm

    @property
    def urls(self):
        return self.get_urls(), self.name, self.name

    def get_urls(self):
        return easy_router(self)


class ModelAPI(object):

    class AllowNone(permissions.BasePermission):
        def has_permission(self, request, view):
            return False

    description = 'Generated by EasyAPI'
    actions = {'None': AllowNone}
